<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-05-04T23:40:38+08:00</updated><id>/</id><title>MK in Apple</title><subtitle>MK的技术博客.</subtitle><author><name>M0nk1y</name><email>monkey19911021@gmail.com</email></author><entry><title>基于xcode7的framework开发技术</title><link href="/%E5%9F%BA%E4%BA%8EXcode7%E7%9A%84framework%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/" rel="alternate" type="text/html" title="基于xcode7的framework开发技术" /><published>2016-05-04T00:00:00+08:00</published><updated>2016-05-04T00:00:00+08:00</updated><id>/基于Xcode7的framework开发技术</id><content type="html" xml:base="/%E5%9F%BA%E4%BA%8EXcode7%E7%9A%84framework%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/">&lt;aside class=&quot;sidebar__right&quot;&gt;
&lt;nav class=&quot;toc&quot;&gt;
    &lt;header&gt;&lt;h4 class=&quot;nav__title&quot;&gt;&lt;i class=&quot;fa fa-gears&quot;&gt;&lt;/i&gt; 目录&lt;/h4&gt;&lt;/header&gt;
&lt;ul class=&quot;toc__menu&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1.  静态库和动态库&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;1.1  什么是静态库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;1.2  什么是动态库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;1.3  选择哪种库&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;2.  制作动态库&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#framework&quot; id=&quot;markdown-toc-framework&quot;&gt;2.1  选择framework项目&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;2.2  创建通用集合&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;2.3  添加项目依赖&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;2.4  添加运行脚本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;2.5  设置证书&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;2.6  编译&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;3.  动态库工程联编&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;3.1  导入动态库项目&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;3.2  设置项目依赖&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;3.3  项目设置&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;4.  制作静态库&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;4.1  项目设置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;4.2  设置开放头文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;4.3  制作资源包&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;5.  静态库工程联编&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;5.1  把资源包放到项目中&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;5.2  设置连接方式&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-21&quot; id=&quot;markdown-toc-section-21&quot;&gt;6.  静态库一秒变动态库&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-22&quot; id=&quot;markdown-toc-section-22&quot;&gt;6.1  基本设置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-23&quot; id=&quot;markdown-toc-section-23&quot;&gt;6.2  设置静态库的编译类型为动态&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/nav&gt;
&lt;/aside&gt;

&lt;h2 id=&quot;section&quot;&gt;1.  静态库和动态库&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Static Library （.a）&lt;/li&gt;
  &lt;li&gt;Dynamic Library (.dylib)&lt;/li&gt;
  &lt;li&gt;Static Framework (.framework)&lt;/li&gt;
  &lt;li&gt;Dynamic Framework (.framework)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.1  什么是静态库&lt;/h3&gt;
&lt;p&gt;程序编译一般需经预处理、编译、汇编和链接几个步骤。在我们的应用中，有一些公共代码是需要反复使用，就把这些代码编译为“库”文件；在链接步骤中，连接器将从库文件取得所需的代码，复制到生成的可执行文件中。这种库称为静态库，其特点是可执行文件中包含了库代码的一份完整拷贝；缺点就是被多次使用就会有多份冗余拷贝。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.2  什么是动态库&lt;/h3&gt;
&lt;p&gt;动态库功能跟静态库类似，也是为了代码复用。静态库在程序的链接阶段被复制到了程序中，和程序运行的时候没有关系；动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用。使用动态库的优点是系统只需载入一次动态库，不同的程序可以得到内存中相同的动态库的复本，因此节省了很多内存。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;1.3  选择哪种库&lt;/h3&gt;
&lt;p&gt;由于Appstore不支持上传包含动态库的app（其原因百度之），所以我们在开发app之前我们需要考虑好，app上架到哪里，动态更新功能是否必不可少。如果只上架到AppStore则只能是用静态库；如果只上架到本地服务器则可以使用动态库和静态库；如果不但要上架到而且还要上架到本地服务器让它具有动态更新功能的，则这个库则需要做得想静态库一样的动态库，我们只需要为静态库做一点小改动则可以变成动态库。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;2.  制作动态库&lt;/h2&gt;

&lt;h3 id=&quot;framework&quot;&gt;2.1  选择framework项目&lt;/h3&gt;
&lt;p&gt;framework一般用于开发动态库
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg1.png&quot; alt=&quot;截图2.1.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命名为：FrameworkTest
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg2.png&quot; alt=&quot;截图2.1.2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;2.2  创建通用集合&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg3.png&quot; alt=&quot;截图2.2.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;命名为项目名+Aggregate：FrameworkTestAggregate
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg4.png&quot; alt=&quot;截图2.2.2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;2.3  添加项目依赖&lt;/h3&gt;
&lt;p&gt;Build Phases ——&amp;gt; Target Dependencies ——&amp;gt; +
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg5.png&quot; alt=&quot;截图2.3.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择本项目
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg6.png&quot; alt=&quot;截图2.3.2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;2.4  添加运行脚本&lt;/h3&gt;
&lt;p&gt;Build Phases ——&amp;gt; + ——&amp;gt; New Run Script Phase
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg7.png&quot; alt=&quot;截图2.4.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg8.png&quot; alt=&quot;截图2.4.2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加如下脚本代码：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Sets the target folders and the final framework product.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install dir will be the final output to the framework.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following line create it in the root folder of the current project.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SRCROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/Products/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.framework

&lt;span class=&quot;c&quot;&gt;# Working dir will be deleted after the framework creation.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WRK_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;build
&lt;span class=&quot;nv&quot;&gt;DEVICE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WRK_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/Release-iphoneos/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.framework
&lt;span class=&quot;nv&quot;&gt;SIMULATOR_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WRK_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/Release-iphonesimulator/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.framework

&lt;span class=&quot;c&quot;&gt;# -configuration ${CONFIGURATION}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Clean and Building both architectures.&lt;/span&gt;
xcodebuild -configuration &lt;span class=&quot;s2&quot;&gt;&quot;Release&quot;&lt;/span&gt; -target &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -sdk iphoneos clean build
xcodebuild -configuration &lt;span class=&quot;s2&quot;&gt;&quot;Release&quot;&lt;/span&gt; -target &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -sdk iphonesimulator clean build

&lt;span class=&quot;c&quot;&gt;# Cleaning the oldest.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
&lt;/span&gt;rm -rf &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;mkdir -p &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

cp -R &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEVICE_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.&lt;/span&gt;
lipo -create &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DEVICE_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SIMULATOR_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -output &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INSTALL_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FMK_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

rm -r &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WRK_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg9.png&quot; alt=&quot;截图2.4.3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作用是把编译后的库代码的模拟器版本和真机版本合并成一个通用版本，使此库能运行在模拟器和真机上。并且把生成的库放在项目文件夹里的Products文件夹。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;2.5  设置证书&lt;/h3&gt;
&lt;p&gt;为了此动态库能运行在普通的iPhone上，需要为动态库像app一样设置开发证书和发布证书。
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg10.png&quot; alt=&quot;截图2.5.1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;2.6  编译&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg11.png&quot; alt=&quot;截图2.6.1&quot; /&gt;
选择通用库编译。&lt;/p&gt;

&lt;p&gt;Build：
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg12.png&quot; alt=&quot;截图2.6.2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;3.  动态库工程联编&lt;/h2&gt;

&lt;h3 id=&quot;section-11&quot;&gt;3.1  导入动态库项目&lt;/h3&gt;
&lt;p&gt;我们新建一个普通app项目来测试此动态库,命名为：&lt;code class=&quot;highlighter-rouge&quot;&gt;TestDynamicFramework&lt;/code&gt;。引入我们刚才的动态库项目&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg13.png&quot; alt=&quot;截图3.1.1&quot; /&gt;——&amp;gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg14.png&quot; alt=&quot;截图3.1.2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;3.2  设置项目依赖&lt;/h3&gt;
&lt;p&gt;导入动态库后可以在添加项目依赖处找到动态库通用集合
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg15.png&quot; alt=&quot;截图3.2.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把动态库生成的framework文件拖进项目
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg16.png&quot; alt=&quot;截图3.2.2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意不要选上Copy items if needed&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;3.3  项目设置&lt;/h3&gt;
&lt;p&gt;删除Build Phases ——&amp;gt; Link Binary With Libraries下因为刚才拉进来的framework而产生的库连接
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg17.png&quot; alt=&quot;截图3.3.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在Build Phases ——&amp;gt; Copy Bundle Resources ——&amp;gt; + ；把动态库添加进来，让app编译的时候把动态复制进main bundle。
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg18.png&quot; alt=&quot;截图3.3.2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样子每次运行app项目的时候都会重新编译动态库，达到可以快速查看动态库的修改。但是每次这样运行app就要重新编译动态库会很耗费时间，所以在不需要修改动态库的时候把项目的动态库依赖给删除。&lt;/p&gt;

&lt;p&gt;*关于如何动态加载动态库以及动态库如何定位资源文件请看Demo。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;4.  制作静态库&lt;/h2&gt;
&lt;p&gt;静态库与动态库的制作方法前5个步骤跟第2节1~6点所讲述的一样，但是静态库需要多执行以下步骤：&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;4.1  项目设置&lt;/h3&gt;
&lt;p&gt;打开Build Settings ——&amp;gt; 搜索mach， 在Mach-O Type一栏中选择Static Library
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg19.png&quot; alt=&quot;截图4.1.1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;4.2  设置开放头文件&lt;/h3&gt;
&lt;p&gt;打开Build Phases ——&amp;gt; Headers，把Project中的需要对外开放的头文件拖到Public中。
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg20.png&quot; alt=&quot;截图4.2.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在与项目名相同的头文件中设置开放的头文件
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg21.png&quot; alt=&quot;截图4.2.2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;4.3  制作资源包&lt;/h3&gt;
&lt;p&gt;由于静态库属于静态连接，资源文件都需要放到bundle中，让其他项目主动加载它，静态库中的对象才能找到这些资源文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg22.png&quot; alt=&quot;截图4.3.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg23.png&quot; alt=&quot;截图4.3.2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置bundle的bitcode为No。
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg24.png&quot; alt=&quot;截图4.3.3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Base SDK 设置为iOS的。
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg25.png&quot; alt=&quot;截图4.3.4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把资源文件添加进Build Phases ——&amp;gt; Copy Bundle Resources
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg26.png&quot; alt=&quot;截图4.3.5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg27.png&quot; alt=&quot;截图4.3.6&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//获取该bundle对象代码：
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bundleWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSBundle&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainBundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URLForResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;StaticFrameworkTestBundle&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;bundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-18&quot;&gt;5.  静态库工程联编&lt;/h2&gt;
&lt;p&gt;静态库工程联编方式跟动态库工程联编方式基本一样，参考第3节1~2点，但需要加上以下步骤：&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;5.1  把资源包放到项目中&lt;/h3&gt;
&lt;p&gt;使用真机把资源包编译一下
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg28.png&quot; alt=&quot;截图5.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg29.png&quot; alt=&quot;截图5.2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把这资源包拖进项目但不要复制。&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;5.2  设置连接方式&lt;/h3&gt;
&lt;p&gt;Build Setting ——&amp;gt; 搜索other linker ——&amp;gt; 在Other Linker Flags 中添加-all_load。目的是为了把静态库中所有的类包括没有直接使用的类创建连接符，让项目可以加载所有的类。
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg30.png&quot; alt=&quot;截图5.2.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, Run！。&lt;/p&gt;

&lt;h2 id=&quot;section-21&quot;&gt;6.  静态库一秒变动态库&lt;/h2&gt;

&lt;h3 id=&quot;section-22&quot;&gt;6.1  基本设置&lt;/h3&gt;
&lt;p&gt;在Build Settings ——&amp;gt; 搜索Preprocessor Macros ——&amp;gt; Debug和Release两项中分别都添加useStaticFramework=1。意思是useStaticFramework=1时使用静态库，useStaticFramework=0时使用动态库。
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg31.png&quot; alt=&quot;截图6.1.1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-23&quot;&gt;6.2  设置静态库的编译类型为动态&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg32.png&quot; alt=&quot;截图6.2.1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意：动静并存时：
&lt;img src=&quot;/images/MKExceptionImg/MKExceptionImg33.png&quot; alt=&quot;截图6.2.2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK，现在只要修改库的编译类型以及app的useStaticFramework就可以让app项目加载动态库或者静态库了。&lt;/p&gt;

&lt;p&gt;*具体代码参考Demo
0&lt;/p&gt;</content><author><name>M0nk1y</name><email>monkey19911021@gmail.com</email></author><summary>目录

  1.  静态库和动态库    
      1.1  什么是静态库
      1.2  什么是动态库
      1.3  选择哪种库
    
  
  2.  制作动态库    
      2.1  选择framework项目
      2.2  创建通用集合
      2.3  添加项目依赖
      2.4  添加运行脚本
    
  


  


1.  静态库和动态库

  Static Library （.a）
  Dynamic Library (.dylib)
  Static Framework (.framework)
  Dynamic Framework (.framework)


1.1  什么是静态库
程序编译一般需经预处理、编译、汇编和链接几个步骤。在我们的应用中，有一些公共代码是需要反复使用，就把这些代码编译为“库”文件；在链接步骤中，连接器将从库文件取得所需的代码，复制到生成的可执行文件中。这种库称为静态库，其特点是可执行文件中包含了库代码的一份完整拷贝；缺点就是被多次使用就会有多份冗余拷贝。

1.2  什么是动态库
动态库功能跟静态库类似，也是为了代码复用。静态库在程序的链接阶段被复制到了程序中，和程序运行的时候没有关系；动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用。使用动态库的优点是系统只需载入一次动态库，不同的程序可以得到内存中相同的动态库的复本，因此节省了很多内存。

1.3  选择哪种库
由于Appstore不支持上传包含动态库的app（其原因百度之），所以我们在开发app之前我们需要考虑好，app上架到哪里，动态更新功能是否必不可少。如果只上架到AppStore则只能是用静态库；如果只上架到本地服务器则可以使用动态库和静态库；如果不但要上架到而且还要上架到本地服务器让它具有动态更新功能的，则这个库则需要做得想静态库一样的动态库，我们只需要为静态库做一点小改动则可以变成动态库。

2.  制作动态库

2.1  选择framework项目
framework一般用于开发动态库


命名为：FrameworkTest


2.2  创建通用集合


命名为项目名+Aggregate：FrameworkTestAggregate


2.3  添加项目依赖
Build Phases ——&amp;gt; Target Dependencies ——&amp;gt; +


选择本项目


2.4  添加运行脚本
Build Phases ——&amp;gt; + ——&amp;gt; New Run Script Phase




添加如下脚本代码：</summary></entry><entry><title>ios的异常处理</title><link href="/iOS-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/" rel="alternate" type="text/html" title="`ios`的异常处理" /><published>2016-05-04T00:00:00+08:00</published><updated>2016-05-04T00:00:00+08:00</updated><id>/`iOS`的异常处理</id><content type="html" xml:base="/iOS-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/">&lt;h2 id=&quot;ios&quot;&gt;iOS异常说明：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;iOS的异常有两种：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;普通异常，能够被NSException捕获的异常&lt;br /&gt;
对于普通异常我们可以使用NSException来捕获并且进行处理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;信号机制异常，不能够被NSException捕获的异常，由系统向自身发出闪退信号导致程序崩溃。&lt;br /&gt;
对于信号机制异常，需要用信号处理函数: &lt;code class=&quot;highlighter-rouge&quot;&gt;void	(*signal(int, void (*)(int)))(int);&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;为某信号注册处理函数：&lt;code class=&quot;highlighter-rouge&quot;&gt;signal(SIGABRT, SignalHandler);&lt;/code&gt;  为信号SIGABRT注册一个SignalHandler处理方法。&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;实现SignalHandler方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;void SignalHandler(int signal){//实现方法}；&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;uncaughtexceptionhandler&quot;&gt;UncaughtExceptionHandler使用方法：&lt;/h2&gt;
&lt;p&gt;在项目的&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.m&lt;/code&gt;文件的import进&lt;code class=&quot;highlighter-rouge&quot;&gt;UncaughtExceptionHandler.h&lt;/code&gt;
然后在方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;- (BOOL)application: didFinishLaunchingWithOptions；&lt;/code&gt;里设置全局异常监控方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;InstallUncaughtExceptionHandler();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;每当异常出现就会弹出一个异常提示框告诉用户软件出现崩溃了，之后程序就会闪退了，并且会在程序的Documents文件夹里生成命名格式为：Exception+时间的异常日志。&lt;/p&gt;

&lt;p&gt;之后需要添加异常日志发送功能，这样开发者就能立即修复软件的错误。&lt;/p&gt;

&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/monkey19911021/MKExceptionHandlerDemo&quot;&gt;MKExceptionHandlerDemo&lt;/a&gt;&lt;/p&gt;</content><author><name>M0nk1y</name><email>monkey19911021@gmail.com</email></author><summary>iOS异常说明：
iOS的异常有两种：


  
    普通异常，能够被NSException捕获的异常
对于普通异常我们可以使用NSException来捕获并且进行处理。
  
  
    信号机制异常，不能够被NSException捕获的异常，由系统向自身发出闪退信号导致程序崩溃。
对于信号机制异常，需要用信号处理函数: void	(*signal(int, void (*)(int)))(int);
    
      为某信号注册处理函数：signal(SIGABRT, SignalHandler);  为信号SIGABRT注册一个SignalHandler处理方法。
      实现SignalHandler方法：void SignalHandler(int signal){//实现方法}；
    
  


UncaughtExceptionHandler使用方法：
在项目的AppDelegate.m文件的import进UncaughtExceptionHandler.h
然后在方法：- (BOOL)application: didFinishLaunchingWithOptions；里设置全局异常监控方法：InstallUncaughtExceptionHandler();

每当异常出现就会弹出一个异常提示框告诉用户软件出现崩溃了，之后程序就会闪退了，并且会在程序的Documents文件夹里生成命名格式为：Exception+时间的异常日志。

之后需要添加异常日志发送功能，这样开发者就能立即修复软件的错误。</summary></entry></feed>

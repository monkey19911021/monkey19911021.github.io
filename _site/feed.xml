<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-05-04T18:23:03+08:00</updated><id>/</id><title>MK in Apple</title><subtitle>MK的技术博客.</subtitle><author><name>M0nk1y</name><email>monkey19911021@gmail.com</email></author><entry><title>ios的异常处理</title><link href="/iOS-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/" rel="alternate" type="text/html" title="`ios`的异常处理" /><published>2016-05-04T00:00:00+08:00</published><updated>2016-05-04T00:00:00+08:00</updated><id>/`iOS`的异常处理</id><content type="html" xml:base="/iOS-%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/">&lt;h2 id=&quot;ios&quot;&gt;iOS异常说明：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;iOS的异常有两种：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;普通异常，能够被NSException捕获的异常&lt;br /&gt;
对于普通异常我们可以使用NSException来捕获并且进行处理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;信号机制异常，不能够被NSException捕获的异常，由系统向自身发出闪退信号导致程序崩溃。&lt;br /&gt;
对于信号机制异常，需要用信号处理函数: &lt;code class=&quot;highlighter-rouge&quot;&gt;void	(*signal(int, void (*)(int)))(int);&lt;/code&gt;&lt;br /&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;为某信号注册处理函数：&lt;code class=&quot;highlighter-rouge&quot;&gt;signal(SIGABRT, SignalHandler);&lt;/code&gt;  为信号SIGABRT注册一个SignalHandler处理方法。&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;实现SignalHandler方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;void SignalHandler(int signal){//实现方法}；&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;uncaughtexceptionhandler&quot;&gt;UncaughtExceptionHandler使用方法：&lt;/h2&gt;
&lt;p&gt;在项目的&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.m&lt;/code&gt;文件的import进&lt;code class=&quot;highlighter-rouge&quot;&gt;UncaughtExceptionHandler.h&lt;/code&gt;
然后在方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;- (BOOL)application: didFinishLaunchingWithOptions；&lt;/code&gt;里设置全局异常监控方法：&lt;code class=&quot;highlighter-rouge&quot;&gt;InstallUncaughtExceptionHandler();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;每当异常出现就会弹出一个异常提示框告诉用户软件出现崩溃了，之后程序就会闪退了，并且会在程序的Documents文件夹里生成命名格式为：Exception+时间的异常日志。&lt;/p&gt;

&lt;p&gt;之后需要添加异常日志发送功能，这样开发者就能立即修复软件的错误。&lt;/p&gt;</content><author><name>M0nk1y</name><email>monkey19911021@gmail.com</email></author><summary>iOS异常说明：
iOS的异常有两种：


  
    普通异常，能够被NSException捕获的异常
对于普通异常我们可以使用NSException来捕获并且进行处理。
  
  
    信号机制异常，不能够被NSException捕获的异常，由系统向自身发出闪退信号导致程序崩溃。
对于信号机制异常，需要用信号处理函数: void	(*signal(int, void (*)(int)))(int);
    
      为某信号注册处理函数：signal(SIGABRT, SignalHandler);  为信号SIGABRT注册一个SignalHandler处理方法。
      实现SignalHandler方法：void SignalHandler(int signal){//实现方法}；
    
  


UncaughtExceptionHandler使用方法：
在项目的AppDelegate.m文件的import进UncaughtExceptionHandler.h
然后在方法：- (BOOL)application: didFinishLaunchingWithOptions；里设置全局异常监控方法：InstallUncaughtExceptionHandler();

每当异常出现就会弹出一个异常提示框告诉用户软件出现崩溃了，之后程序就会闪退了，并且会在程序的Documents文件夹里生成命名格式为：Exception+时间的异常日志。

之后需要添加异常日志发送功能，这样开发者就能立即修复软件的错误。</summary></entry></feed>
